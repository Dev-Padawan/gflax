diff --git a/examples/mnist/train.py b/examples/mnist/train.py
index 9c21985..c63f6fa 100644
--- a/examples/mnist/train.py
+++ b/examples/mnist/train.py
@@ -60,24 +60,42 @@ flags.DEFINE_string(
     help=('Directory to store model data.'))
 
 
+# Global dict for storing layer output shapes
+LAYER_OUTPUT_SHAPES = {}
+
+
 class CNN(nn.Module):
   """A simple CNN model."""
 
   def apply(self, x):
-    x = nn.Conv(x, features=32, kernel_size=(3, 3))
+    x = capture_shapes(nn.Conv)(x, features=32, kernel_size=(3, 3))
     x = nn.relu(x)
     x = nn.avg_pool(x, window_shape=(2, 2), strides=(2, 2))
-    x = nn.Conv(x, features=64, kernel_size=(3, 3))
+    x = capture_shapes(nn.Conv)(x, features=64, kernel_size=(3, 3))
     x = nn.relu(x)
     x = nn.avg_pool(x, window_shape=(2, 2), strides=(2, 2))
     x = x.reshape((x.shape[0], -1))  # flatten
-    x = nn.Dense(x, features=256)
+    x = capture_shapes(nn.Dense)(x, features=256)
     x = nn.relu(x)
-    x = nn.Dense(x, features=10)
+    x = capture_shapes(nn.Dense)(x, features=10)
     x = nn.log_softmax(x)
     return x
 
 
+def capture_shapes(module):
+  """Capture the shapes of the layer outputs"""
+  layer_idx = "{}_{}".format(module.__name__, len(LAYER_OUTPUT_SHAPES))
+  
+  class CaptureModule(nn.Module):
+    
+    def apply(*args, **kwargs):
+      x = module.apply(*args, **kwargs)
+      LAYER_OUTPUT_SHAPES[layer_idx] = onp.shape(x)
+      return x
+
+  return CaptureModule
+
+
 def create_model(key):
   _, initial_params = CNN.init_by_shape(key, [((1, 28, 28, 1), jnp.float32)])
   model = nn.Model(CNN, initial_params)
@@ -185,6 +203,10 @@ def train(train_ds, test_ds):
 
   rng, init_rng = random.split(rng)
   model = create_model(init_rng)
+
+  # Print intermediate layer output shapes
+  print('Layer output shapes:\n', LAYER_OUTPUT_SHAPES)
+
   optimizer = create_optimizer(model, FLAGS.learning_rate, FLAGS.momentum)
 
   for epoch in range(1, num_epochs + 1):
