# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  push:
    branches:
      - main
      - 'test_*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - name: Cancel previous
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}          
    - name: Install native dependencies
      run: |
        sudo apt-get -y install pandoc
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    # We allow at most 5 commits in a branch to ensure our CI doesn't break.
    - name: Check commit count in PR
      if: always()
      shell: bash
      run: |
        set -x
        # $GITHUB_REF is in format `refs/heads/<branch_name>`. We fetch it under
        # the name `commit-count` so we can refer to it below.
        # Do an unshallow fetch so we retrieve all commits (this is necessary
        # because ations/checkout@v2 fetches a shallow copy).
        git fetch origin --unshallow $GITHUB_REF:commit-count
        git fetch origin main
        diff=$(git rev-list --count origin/main...commit-count)
        # $GITHUB_REF adds an additional commit to the commit tree, so $diff is
        # one too high when executing this as a Github Action.
        if (( $diff > 6)); then
          echo "ERROR! More than 5 commits in PR -- please squash your commits."
          url=https://flax.readthedocs.io/en/latest/contributing.html#too-many-commits-in-a-pr
          echo "See $url for help on how to resolve this."
          exit 1
        fi
    - name: Install dependencies
      run: |
        pip install .
        pip install .[testing]
        pip install -r docs/requirements.txt
    - name: Test testcode blocks in documentation
      run: |
        sphinx-build -M doctest docs docs/_build
    - name: Build documentation
      run: |
        sphinx-build -M html docs docs/_build
    - name: Test with pytest and generate coverage report
      run: |
        tests/run_all_tests.sh --with-cov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
    # The below step just reports the success or failure of tests as a "commit status".
    # This is needed for copybara integration.
    - name: Report success or failure as github status
      if: always()
      shell: bash
      run: |
        status="${{ job.status }}"
        lowercase_status=$(echo $status | tr '[:upper:]' '[:lower:]')
        curl -sS --request POST \
        --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        --header 'content-type: application/json' \
        --data '{
           "state": "'$lowercase_status'",
           "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
           "description": "'$status'",
           "context": "github-actions/Build"
           }'
